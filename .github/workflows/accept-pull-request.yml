name: accept-pull-request

on:
  issue_comment:
    types:
      - created

jobs:
  accept-pull-request:
    env:   
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      OWNER: ${{ github.repository_owner }}
      REPO: ${{ github.event.repository.name }}
      PR_NUMBER: ${{ github.event.issue.number }}
      COMMENT_USER_LOGIN: ${{ github.event.comment.user.login }}
    name: accept-pull-request
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/accept'}}
    steps:

      - name: Init all external vars       
        run: |
            gh api repos/"${OWNER}"/"${REPO}"/pulls/"${PR_NUMBER}" > pr_detail.json          
            echo "HEAD_REF=$(jq -rc .head.ref pr_detail.json)" | tee -a $GITHUB_ENV
            echo "BASE_REF=$(jq -rc .base.ref pr_detail.json)" | tee -a $GITHUB_ENV
            echo "PR_STATE=$(jq -rc .state pr_detail.json)" | tee -a $GITHUB_ENV
            echo "PR_DRAFT=$(jq -rc .draft pr_detail.json)" | tee -a $GITHUB_ENV
            echo "PR_MERGEABLE=$(jq -rc .mergeable pr_detail.json)" | tee -a $GITHUB_ENV
            echo "REMAINING_COMMITS_FILE=remaining_commits.txt" | tee -a $GITHUB_ENV            
            echo "NEW_COMMITS_FILE=new_commits.txt" | tee -a $GITHUB_ENV
            echo "GITHUB_CONTEXT=${{ toJson(github) }}" | tee -a $GITHUB_ENV
            echo "ENV_CONTEXT= ${{ toJson(env) }}" | tee -a $GITHUB_ENV
            echo "JOB_CONTEXT= ${{ toJson(job) }}" | tee -a $GITHUB_ENV    
            echo "STEPS_CONTEXT= ${{ toJson(steps) }}" | tee -a $GITHUB_ENV
            echo "RUNNER_CONTEXT= ${{ toJson(runner) }}" | tee -a $GITHUB_ENV
            echo "SECRETS_CONTEXT= ${{ toJson(secrets) }}" | tee -a $GITHUB_ENV
            echo "STRATEGY_CONTEXT= ${{ toJson(strategy) }}" | tee -a $GITHUB_ENV
            echo "MATRIX_CONTEXT= ${{ toJson(matrix) }}" | tee -a $GITHUB_ENV
            echo "NEEDS_CONTEXT= ${{ toJson(needs) }}" | tee -a $GITHUB_ENV
            echo "INPUTS_CONTEXT= ${{ toJson(inputs) }} " | tee -a $GITHUB_ENV
            cat "${GITHUB_ENV}"

      - name: Check comment user permission
        run: |
            comment_user_permission=$(gh api repos/"${OWNER}"/"${REPO}"/collaborators/lepapareil/permission -q .permission)
            if [ "${comment_user_permission}" = "admin" ] ; then
                comment="✅ You are allowed to accept pull request n°${PR_NUMBER}"
                echo "  - ${comment}"
            else
                comment="❌ Sorry \`${COMMENT_USER_LOGIN}\`, you are not allowed to accept this pull request because you do not have admin permission (actual permission=${comment_user_permission})."
                echo "  - ${comment}"
                gh pr comment "${PR_NUMBER}" --body "${comment}"
                exit 1
            fi

      - name: Check if pull request state is open
        run: |
            if [ "${{ env.PR_STATE }}" = "open" ] ; then
                comment="✅ Pull request is open."
                echo "  - ${comment}"
            else
                comment="❌ Can not accept this pull request because it is not open (actual state=${{ env.PR_STATE }})."
                echo "  - ${comment}"
                gh pr comment "${PR_NUMBER}" --body "${comment}"
                exit 1         
            fi

      - name: Check if pull request is ready
        run: |
            if [ "${{ env.PR_DRAFT }}" = "false" ] ; then
                comment="✅ Pull request is not draft."
                echo "  - ${comment}"
            else
                comment="❌ Can not accept this pull request because it is still in draft."
                echo "  - ${comment}"
                gh pr comment "${PR_NUMBER}" --body "${comment}"
                exit 1         
            fi

      - name: Check if pull request is mergeable
        run: |
            if [ "${{ env.PR_MERGEABLE }}" = "true" ] ; then
                comment="✅ Pull request is mergeable."
                echo "  - ${comment}"
            else
                comment="❌Pull request is not mergeable, please check conflicts with target \`${{ env.BASE_REF }}\` branch and pull request messages."
                echo "  - ${comment}"
                gh pr comment "${PR_NUMBER}" --body "${comment}"
                exit 1         
            fi

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BASE_REF }}
          fetch-depth: 0

      - name: Check if source branch is rebased from target branch
        run: |
            git log --oneline --cherry origin/${{ env.HEAD_REF }}...origin/${{ env.BASE_REF }} | tee "${{ env.REMAINING_COMMITS_FILE }}"
            diff_count=$(grep -c ^+ ${{ env.REMAINING_COMMITS_FILE }} || true)
            if [ ${diff_count} -eq 0 ] ; then
                comment="✅ ${{ env.HEAD_REF }} is already rebased from ${{ env.BASE_REF }}."
                echo "  - ${comment}"
            else
                comment="❌ You have to rebase your \`${{ env.HEAD_REF }}\` branch first because there are new commits pending on target \`${{ env.BASE_REF }}\` branch:<br>$(echo ; sed "s/+/-/g" ${{ env.REMAINING_COMMITS_FILE }})"
                echo "  - ${comment}"
                gh pr comment "${PR_NUMBER}" --body "${comment}"
                exit 1
            fi

      - name: Get new commits list
        run: |
            git log --oneline --cherry origin/${{ env.BASE_REF }}...origin/${{ env.HEAD_REF }} | tee ${{ env.NEW_COMMITS_FILE }}

      - name: Merge fast forward head ref to base ref 
        run: |
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git merge origin/${{ env.HEAD_REF }} --ff-only && exit_code=0 || exit_code=1
            if [ ${exit_code} -eq 0 ] ; then
                comment="✅ Merge fast forward succeeds."
                echo "  - ${comment}"
            else
                comment="❌ Merge fast forward fails. Please refer to ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} logs."
                echo "  - ${comment}"
                gh pr comment "${PR_NUMBER}" --body "${comment}"
                exit 1         
            fi
            git push && exit_code=0 || exit_code=1
            if [ ${exit_code} -eq 0 ] ; then
                comment="✅ Push merge fast forward succeeds."
                echo "  - ${comment}"
            else
                comment="❌ Push merge fast forward fails. Please refer to ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} logs."
                echo "  - ${comment}"
                gh pr comment "${PR_NUMBER}" --body "${comment}"
                exit 1         
            fi             

      - name: Close pull request
        run: |
            comment="✅ Pull request accepted and closed by \`${COMMENT_USER_LOGIN}\` with fast forward merge."
            gh pr close "${PR_NUMBER}" --comment "${comment}.<br><br>\# List of commits merged from \`${{ env.HEAD_REF }}\` branch into \`${{ env.BASE_REF }}\` branch:<br>$(echo ; sed "s/+/-/g" ${{ env.NEW_COMMITS_FILE }})" && exit_code=0 || exit_code=1
            if [ ${exit_code} -eq 0 ] ; then
                echo "  - ${comment}"     
            else
                comment="❌ A problem occured when closing pull request."
                echo "  - ${comment}"
                gh pr comment "${PR_NUMBER}" --body "${comment} Please refer to ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID} logs."
                exit 1       
            fi
