name: accept-pull-request

on:
  issue_comment:
    types:
      - created

jobs:
  accept-pull-request:
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}    
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      OWNER: ${{ github.repository_owner }}
      REPO: ${{ github.event.repository.name }}
      PR_NUMBER: ${{ github.event.issue.number }}
      COMMENT_USER_LOGIN: ${{ github.event.comment.user.login }}
    name: accept-pull-request
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/accept'}}
    steps:

      - name: Check comment user permission
        run: |
            comment_user_permission=$(gh api repos/"${OWNER}"/"${REPO}"/collaborators/lepapareil/permission -q .permission)
            if [ "${comment_user_permission}" = "admin" ] ; then
                comment="✅ You are allowed to accept PR"
                echo "  - ${comment}"
            else
                comment="❌ Sorry \`${COMMENT_USER_LOGIN}\`, you are not allowed to accept this PR because you do not have admin permission (your actual permission is [${comment_user_permission}])."
                echo "  - ${comment}"
                gh pr comment "${PR_NUMBER}" --body "${comment}"
                exit 1
            fi

      - name: Get PR details      
        run: |
            gh api repos/"${OWNER}"/"${REPO}"/pulls/"${PR_NUMBER}" > pr_detail.json          
            echo "HEAD_REF=$(jq -rc .head.ref pr_detail.json)" >> $GITHUB_ENV
            echo "BASE_REF=$(jq -rc .base.ref pr_detail.json)" >> $GITHUB_ENV
            echo "PR_STATE=$(jq -rc .state pr_detail.json)" >> $GITHUB_ENV
            echo "PR_LOCKED=$(jq -rc .locked pr_detail.json)" >> $GITHUB_ENV
            echo "PR_DRAFT=$(jq -rc .draft pr_detail.json)" >> $GITHUB_ENV
            echo "PR_MERGEABLE=$(jq -rc .mergeable pr_detail.json)" >> $GITHUB_ENV
        
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.HEAD_REF }}
          fetch-depth: 0

      - name: Check if PR is open
        run: |
            if [ "${{ env.PR_STATE }}" = "opene" ] ; then
                comment="✅ Pull request is open."
                echo "  - ${comment}"
            else
                  comment="❌ Can not accept this pull request since it is not open (actual state=[${{ env.PR_STATE }}])."
                echo "  - ${comment}"
                gh pr comment "${PR_NUMBER}" --body "${comment}"
                exit 1         
            fi

      - name: Check if PR is mergeable
        run: |
            echo toto

      - name: Check if source branch is rebased from target branch
        run: |
            git log --oneline --cherry origin/${{ env.HEAD_REF }}...origin/${{ env.BASE_REF }} > git_diff.txt
            diff_count=$(grep -c ^+ git_diff.txt)
            if [ ${diff_count} -eq 0 ] ; then
                comment="✅ ${{ env.HEAD_REF }} is already rebased from ${{ env.BASE_REF }}."
                echo "  - ${comment}"
            else
                comment="❌ You have to rebase your \`${{ env.HEAD_REF }}\` branch first because there are new commits pending on target \`${{ env.BASE_REF }}\` branch:<br><br>$(echo ; sed "s/+/-/g" git_diff.txt)"
                echo "  - ${comment}"
                gh pr comment "${PR_NUMBER}" --body "${comment}"
                exit ${diff_count}
            fi

      - name: Merge fast forward head ref to base ref 
        run: |
            echo toto
